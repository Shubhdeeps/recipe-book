{"version":3,"file":"static/js/426.b8cb0ed3.chunk.js","mappings":"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","sources":["components/RenderArray.tsx","components/NewRecipe.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { IList } from \"../models/recipe.model\";\r\n\r\n\r\n\r\nconst RenderArray: React.FC<IList> = ({ title, sub }) => {\r\n    const [totalIngredients, setTotalIngredients] = useState<string[]>([sub]);\r\n    \r\n    return(\r\n        <>\r\n            <Form.Label> {title} </Form.Label>\r\n            {\r\n                totalIngredients.map((element, index) => {\r\n                    const holder = `${sub} ${index + 1}`\r\n                    return <Form.Control size=\"sm\" key={index} className=\"mt-2\" type=\"text\" placeholder={holder} />\r\n                })\r\n            }\r\n            <Button size=\"sm\" className=\"mt-2\" variant=\"primary\" onClick={() => setTotalIngredients([...totalIngredients, sub])} >\r\n               Add\r\n            </Button> \r\n            <Button size=\"sm\" className=\"mt-2 ms-2\" variant=\"primary\" \r\n                onClick={() => setTotalIngredients(totalIngredients.slice(0, -1))}\r\n                disabled={totalIngredients.length >= 2 ? false : true}\r\n                >\r\n               Remove\r\n            </Button>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default RenderArray;","import React, { useRef, useState } from \"react\";\r\nimport { Alert, Button, Container, Form, InputGroup } from \"react-bootstrap\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\nimport { IState } from \"../models/recipe.model\";\r\nimport { useNavigate } from 'react-router-dom'\r\nimport RenderArray from \"./RenderArray\";\r\n\r\n\r\nconst NewRecipe: React.FC = () => {\r\n\r\n    const [error, setError] = useState<string>(\"\");\r\n    const [success, setSuccess] = useState<boolean>(false);\r\n    const titleRef = useRef<HTMLInputElement | null>(null)\r\n    const timeRef = useRef<HTMLInputElement | null>(null)\r\n    const ingredientRef = useRef<HTMLInputElement | null>(null)\r\n    const methodRef = useRef<HTMLInputElement | null>(null)\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n        e.preventDefault();\r\n        if(titleRef.current?.value === \"\" || timeRef.current?.value === \"\"){\r\n            return setError(\"All fields are required\");\r\n        }\r\n        const ingredientsArray = createArr([].slice.call( ingredientRef.current?.children ).slice(1,-2) as HTMLInputElement[]);  \r\n        const methodArray = createArr([].slice.call( methodRef.current?.children ).slice(1,-2) as HTMLInputElement[]);\r\n\r\n        if(ingredientsArray.includes(\"\") || methodArray.includes(\"\")){\r\n            return setError(\"Either fill all fields or remove them\");\r\n        }\r\n\r\n        const createObject: IState['recipe'][0] = {\r\n            title: titleRef.current!.value,\r\n            cookingTime: `${timeRef.current!.value} minutes`,\r\n            ingredients: ingredientsArray,\r\n            method: methodArray,\r\n        }\r\n\r\n        Submit(createObject)\r\n        \r\n    }\r\n\r\n    const Submit = async (doc: IState['recipe'][0]) => {\r\n    \r\n        setSuccess(true)\r\n        try{\r\n           await projectFirestore.collection('cooking').add(doc)\r\n           window.location.reload();\r\n        } catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const createArr = (ingredientsArray: HTMLInputElement[]) => {\r\n        const valueArray = ingredientsArray.map(x => {\r\n            return x.value;\r\n        })\r\n        \r\n        return valueArray\r\n    }\r\n\r\n    return <Container>\r\n    <h2>New recipe</h2>\r\n    <Form onSubmit={(e) => handleSubmit(e)}>\r\n        <Form.Group className=\"mb-3\" controlId=\"formbasicRecipe\">\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control type=\"text\" placeholder=\"Recipe name\" ref={titleRef} />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n            <Form.Label>Cooking Time</Form.Label>\r\n            <InputGroup>\r\n            <Form.Control type=\"text\" placeholder=\"Time to cook\" ref={timeRef} />\r\n            <InputGroup.Text id=\"basic-addon2\">minutes</InputGroup.Text>\r\n            </InputGroup>\r\n            <Form.Text className=\"text-muted\">\r\n            Cooking time in minutes i.e 5\r\n            </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\" ref={ingredientRef} >\r\n            <RenderArray title=\"Ingredients\" sub=\"ingredient\"  />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\" ref={methodRef} >\r\n            <RenderArray title=\"Method\" sub=\"step\"  />\r\n        </Form.Group>\r\n        { error && <Alert variant='danger'  onClose={() => setError(\"\")} dismissible>{ error }</Alert>}\r\n        { success && <Alert variant='success'> Recipe added successfully, redirecting... </Alert>}\r\n        <Button variant=\"primary\" type=\"submit\">\r\n            Submit\r\n        </Button>\r\n    </Form>\r\n    </Container>\r\n}\r\n\r\n\r\n\r\n\r\nexport default NewRecipe;\r\n"],"names":["title","sub","useState","totalIngredients","setTotalIngredients","Form","map","element","index","holder","size","className","type","placeholder","Button","variant","onClick","slice","disabled","length","error","setError","success","setSuccess","titleRef","useRef","timeRef","ingredientRef","methodRef","Submit","useNavigate","doc","projectFirestore","add","window","location","reload","console","log","createArr","ingredientsArray","x","value","Container","onSubmit","e","preventDefault","current","call","children","methodArray","includes","createObject","cookingTime","ingredients","method","handleSubmit","controlId","ref","InputGroup","id","Alert","onClose","dismissible"],"sourceRoot":""}